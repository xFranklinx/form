// Code.gs (Server-side)
function doGet() {
  return HtmlService.createTemplateFromFile('Index')
      .evaluate()
      .setTitle('Billing Adjustment Request')
      .setFaviconUrl('https://www.google.com/images/favicon.ico')
      .addMetaTag('viewport', 'width=device-width, initial-scale=1');
}

function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

function processForm(formData) {
  // Create PDF
  const pdfFile = createPDF(formData);
  
  // Send emails
  sendEmails(formData, pdfFile);
  
  // Create ticket
  createTicket(formData);
  
  return { success: true, message: 'Request submitted successfully!' };
}

// Index.html
<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <?!= include('Stylesheet'); ?>
  </head>
  <body>
    <div class="container mt-4">
      <h2>Request Form</h2>
      <div id="formProgress" class="mb-4">
        <!-- Progress indicators will be dynamically inserted here -->
      </div>
      <div id="formContent">
        <form id="adjustmentForm" onsubmit="handleSubmit(event)">
          <div id="dynamicFields"></div>
          <div class="button-group mt-3">
            <button type="button" class="btn btn-secondary" onclick="previousSection()" id="prevButton" style="display: none;">Previous</button>
            <button type="button" class="btn btn-primary" onclick="nextSection()" id="nextButton">Next</button>
            <button type="submit" class="btn btn-success" id="submitButton" style="display: none;">Submit</button>
          </div>
        </form>
      </div>
    </div>
    
    <?!= include('JavaScript'); ?>
  </body>
</html>

// JavaScript.html
<script>
// Form state management
const formState = {
  currentSection: 0,
  department: '',
  submissionType: '',
  data: {}
};

// Define the form structure
const formSections = {
  department: {
    id: 'department',
    title: 'Select Department',
    fields: [
      {
        type: 'select',
        id: 'department',
        label: 'Department',
        options: ['Mid-Office', 'Front-Office', 'Outsourced'],
        required: true
      }
    ]
  },
  submissionType: {
    id: 'submissionType',
    title: 'Select Submission Type',
    fields: [
      {
        type: 'select',
        id: 'submissionType',
        label: 'Submission Type',
        options: ['Billing Adjustment', 'Record Only Adjustment', 'Both'],
        required: true
      }
    ]
  },
  billingAdjustment: {
    id: 'billingAdjustment',
    title: 'Billing Adjustment Details',
    condition: (state) => ['Billing Adjustment', 'Both'].includes(state.submissionType),
    fields: [
      {
        type: 'text',
        id: 'accountNumber',
        label: 'Account Number',
        required: true
      },
      {
        type: 'number',
        id: 'adjustmentAmount',
        label: 'Adjustment Amount',
        required: true
      },
      {
        type: 'select',
        id: 'adjustmentReason',
        label: 'Adjustment Reason',
        options: ['Billing Error', 'Service Credit', 'Proration', 'Other'],
        required: true
      },
      {
        type: 'textarea',
        id: 'adjustmentDescription',
        label: 'Detailed Description',
        required: true
      }
    ]
  },
  recordOnlyAdjustment: {
    id: 'recordOnlyAdjustment',
    title: 'Record Only Adjustment Details',
    condition: (state) => ['Record Only Adjustment', 'Both'].includes(state.submissionType),
    fields: [
      {
        type: 'text',
        id: 'recordId',
        label: 'Record ID',
        required: true
      },
      {
        type: 'select',
        id: 'recordType',
        label: 'Record Type',
        options: ['Customer Record', 'Account Record', 'Service Record'],
        required: true
      },
      {
        type: 'textarea',
        id: 'recordChangeDescription',
        label: 'Change Description',
        required: true
      }
    ]
  }
};

// Get visible sections based on current state
function getVisibleSections() {
  return Object.values(formSections).filter(section => {
    if (!section.condition) return true;
    return section.condition(formState);
  });
}

// Initialize form
function initializeForm() {
  updateProgressIndicators();
  renderCurrentSection();
}

// Update progress indicators
function updateProgressIndicators() {
  const sections = getVisibleSections();
  const progressDiv = document.getElementById('formProgress');
  progressDiv.innerHTML = '';
  
  const progressBar = document.createElement('div');
  progressBar.className = 'progress mb-3';
  
  const progress = document.createElement('div');
  progress.className = 'progress-bar';
  progress.style.width = `${((formState.currentSection + 1) / sections.length) * 100}%`;
  
  progressBar.appendChild(progress);
  progressDiv.appendChild(progressBar);
  
  const steps = document.createElement('div');
  steps.className = 'd-flex justify-content-between';
  
  sections.forEach((section, index) => {
    const step = document.createElement('div');
    step.className = 'progress-step';
    step.innerHTML = `
      <div class="step-indicator ${index <= formState.currentSection ? 'active' : ''}"></div>
      <div class="step-label">${section.title}</div>
    `;
    steps.appendChild(step);
  });
  
  progressDiv.appendChild(steps);
}

// Render current section
function renderCurrentSection() {
  const sections = getVisibleSections();
  const currentSection = sections[formState.currentSection];
  const container = document.getElementById('dynamicFields');
  
  container.innerHTML = '';
  
  if (!currentSection) return;
  
  const sectionDiv = document.createElement('div');
  sectionDiv.className = 'form-section';
  sectionDiv.innerHTML = `<h4>${currentSection.title}</h4>`;
  
  currentSection.fields.forEach(field => {
    const fieldDiv = document.createElement('div');
    fieldDiv.className = 'mb-3';
    fieldDiv.innerHTML = createFieldHTML(field);
    sectionDiv.appendChild(fieldDiv);
  });
  
  container.appendChild(sectionDiv);
  
  // Update button visibility
  document.getElementById('prevButton').style.display = 
    formState.currentSection > 0 ? 'inline-block' : 'none';
  document.getElementById('nextButton').style.display = 
    formState.currentSection < sections.length - 1 ? 'inline-block' : 'none';
  document.getElementById('submitButton').style.display = 
    formState.currentSection === sections.length - 1 ? 'inline-block' : 'none';
    
  // Restore any previously entered values
  restoreFieldValues();
}

// Create HTML for different field types
function createFieldHTML(field) {
  switch (field.type) {
    case 'text':
    case 'email':
    case 'number':
      return `
        <label for="${field.id}" class="form-label">${field.label}</label>
        <input type="${field.type}" class="form-control" id="${field.id}" name="${field.id}"
               ${field.required ? 'required' : ''}>
      `;
    case 'select':
      return `
        <label for="${field.id}" class="form-label">${field.label}</label>
        <select class="form-select" id="${field.id}" name="${field.id}" 
                ${field.required ? 'required' : ''} onchange="handleFieldChange('${field.id}')">
          <option value="">Select ${field.label}</option>
          ${field.options.map(opt => `<option value="${opt}">${opt}</option>`).join('')}
        </select>
      `;
    case 'textarea':
      return `
        <label for="${field.id}" class="form-label">${field.label}</label>
        <textarea class="form-control" id="${field.id}" name="${field.id}" rows="3"
                  ${field.required ? 'required' : ''}></textarea>
      `;
  }
}

// Handle field changes
function handleFieldChange(fieldId) {
  const field = document.getElementById(fieldId);
  formState.data[fieldId] = field.value;
  
  if (fieldId === 'department') {
    formState.department = field.value;
  } else if (fieldId === 'submissionType') {
    formState.submissionType = field.value;
  }
  
  // If this field affects form structure, re-render
  if (['department', 'submissionType'].includes(fieldId)) {
    updateProgressIndicators();
  }
}

// Navigate to next section
function nextSection() {
  if (validateCurrentSection()) {
    saveCurrentSectionData();
    formState.currentSection++;
    renderCurrentSection();
    updateProgressIndicators();
  }
}

// Navigate to previous section
function previousSection() {
  if (formState.currentSection > 0) {
    saveCurrentSectionData();
    formState.currentSection--;
    renderCurrentSection();
    updateProgressIndicators();
  }
}

// Validate current section
function validateCurrentSection() {
  const form = document.getElementById('adjustmentForm');
  const inputs = form.querySelectorAll('input, select, textarea');
  
  let valid = true;
  inputs.forEach(input => {
    if (input.required && !input.value) {
      valid = false;
      input.classList.add('is-invalid');
    } else {
      input.classList.remove('is-invalid');
    }
  });
  
  return valid;
}

// Save current section data
function saveCurrentSectionData() {
  const form = document.getElementById('adjustmentForm');
  const inputs = form.querySelectorAll('input, select, textarea');
  
  inputs.forEach(input => {
    formState.data[input.name] = input.value;
  });
}

// Restore field values
function restoreFieldValues() {
  Object.entries(formState.data).forEach(([key, value]) => {
    const field = document.getElementById(key);
    if (field) field.value = value;
  });
}

// Handle form submission
async function handleSubmit(event) {
  event.preventDefault();
  
  if (!validateCurrentSection()) return;
  
  saveCurrentSectionData();
  
  try {
    const result = await google.script.run
      .withSuccessHandler(onSuccess)
      .withFailureHandler(onFailure)
      .processForm(formState.data);
  } catch (error) {
    onFailure(error);
  }
}

function onSuccess(result) {
  alert('Request submitted successfully!');
  formState.currentSection = 0;
  formState.data = {};
  initializeForm();
}

function onFailure(error) {
  alert('Error submitting request: ' + error.message);
}

// Initialize the form when the page loads
window.onload = initializeForm;
</script>

// Stylesheet.html
<style>
.form-section {
  background-color: #f8f9fa;
  padding: 20px;
  border-radius: 8px;
  margin-bottom: 20px;
}

.form-section h4 {
  color: #0d6efd;
  margin-bottom: 15px;
}

.progress-step {
  text-align: center;
  flex: 1;
}

.step-indicator {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: #dee2e6;
  margin: 0 auto 5px;
}

.step-indicator.active {
  background-color: #0d6efd;
}

.step-label {
  font-size: 0.875rem;
  color: #6c757d;
}

.button-group {
  display: flex;
  gap: 10px;
}

.is-invalid {
  border-color: #dc3545;
}

@media (max-width: 768px) {
  .container {
    padding: 10px;
  }
  
  .form-section {
    padding: 15px;
  }
  
  .step-label {
    font-size: 0.75rem;
  }
}
</style>
