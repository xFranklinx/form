// Code.gs (Server-side)
const ADMIN_EMAILS = ['your.email@company.com', 'boss.email@company.com'];

function doGet() {
  return HtmlService.createTemplateFromFile('Index')
      .evaluate()
      .setTitle('Billing Adjustment Dashboard')
      .setFaviconUrl('https://www.google.com/images/favicon.ico')
      .addMetaTag('viewport', 'width=device-width, initial-scale=1');
}

function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

function getCurrentUserEmail() {
  return Session.getActiveUser().getEmail();
}

function isAdmin() {
  const userEmail = getCurrentUserEmail();
  return ADMIN_EMAILS.includes(userEmail);
}

function getSubmissions() {
  const userEmail = getCurrentUserEmail();
  const spreadsheet = SpreadsheetApp.openById('YOUR_SPREADSHEET_ID');
  const sheet = spreadsheet.getSheetByName('Submissions');
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const submissions = data.slice(1).map(row => {
    const submission = {};
    headers.forEach((header, index) => {
      submission[header] = row[index];
    });
    return submission;
  });
  
  // Filter submissions based on user role
  if (!isAdmin()) {
    return submissions.filter(submission => submission.submitterEmail === userEmail);
  }
  
  return submissions;
}

function updateSubmissionStatus(submissionId, updates) {
  // Update submission status, handler, and notes in the spreadsheet
  // Implementation depends on your data structure
}

// Index.html
<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <?!= include('Stylesheet'); ?>
  </head>
  <body>
    <div class="container-fluid mt-4">
      <div class="row mb-4">
        <div class="col">
          <h2>Billing Adjustment Dashboard</h2>
        </div>
        <div class="col text-end">
          <button class="btn btn-primary" onclick="showNewSubmissionForm()">
            <i class="bi bi-plus-circle"></i> New Submission
          </button>
        </div>
      </div>
      
      <div class="card">
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-hover" id="submissionsTable">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Date</th>
                  <th>Department</th>
                  <th>Type</th>
                  <th>Status</th>
                  <th>Handler</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="submissionsTableBody">
                <!-- Submissions will be dynamically inserted here -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <!-- Submission Modal -->
    <div class="modal fade" id="submissionModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Submission Details</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <div class="row">
              <div class="col-md-8">
                <div id="submissionDetails">
                  <!-- Submission details will be dynamically inserted here -->
                </div>
              </div>
              <div class="col-md-4">
                <div class="card">
                  <div class="card-body">
                    <h6 class="card-title">Status Update</h6>
                    <div class="mb-3">
                      <label class="form-label">Status</label>
                      <select class="form-select" id="statusSelect">
                        <option value="pending">Pending</option>
                        <option value="in_progress">In Progress</option>
                        <option value="completed">Completed</option>
                      </select>
                    </div>
                    <div class="mb-3">
                      <label class="form-label">Handler</label>
                      <input type="text" class="form-control" id="handlerInput">
                    </div>
                    <div class="mb-3">
                      <label class="form-label">Notes</label>
                      <textarea class="form-control" id="notesTextarea" rows="4"></textarea>
                    </div>
                    <button class="btn btn-primary w-100" onclick="updateStatus()">
                      Update
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- New Submission Form Modal -->
    <div class="modal fade" id="newSubmissionModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">New Submission</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <div id="formContent">
              <!-- Dynamic form will be inserted here -->
            </div>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <?!= include('JavaScript'); ?>
  </body>
</html>

// JavaScript.html
<script>
let currentSubmission = null;
let submissionsData = [];
let isAdminUser = false;

// Initialize the dashboard
async function initializeDashboard() {
  try {
    isAdminUser = await google.script.run.withSuccessHandler(result => result).isAdmin();
    loadSubmissions();
  } catch (error) {
    console.error('Error initializing dashboard:', error);
  }
}

// Load submissions
async function loadSubmissions() {
  try {
    const submissions = await google.script.run.withSuccessHandler(data => data).getSubmissions();
    submissionsData = submissions;
    renderSubmissionsTable(submissions);
  } catch (error) {
    console.error('Error loading submissions:', error);
  }
}

// Render submissions table
function renderSubmissionsTable(submissions) {
  const tbody = document.getElementById('submissionsTableBody');
  tbody.innerHTML = '';
  
  submissions.forEach(submission => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${submission.id}</td>
      <td>${new Date(submission.date).toLocaleDateString()}</td>
      <td>${submission.department}</td>
      <td>${submission.type}</td>
      <td>
        <span class="badge bg-${getStatusBadgeClass(submission.status)}">
          ${submission.status}
        </span>
      </td>
      <td>${submission.handler || '-'}</td>
      <td>
        <button class="btn btn-sm btn-primary" onclick="viewSubmission('${submission.id}')">
          View/Edit
        </button>
      </td>
    `;
    tbody.appendChild(row);
  });
}

// Get status badge class
function getStatusBadgeClass(status) {
  switch (status.toLowerCase()) {
    case 'completed': return 'success';
    case 'in_progress': return 'warning';
    default: return 'secondary';
  }
}

// View submission details
function viewSubmission(submissionId) {
  currentSubmission = submissionsData.find(s => s.id === submissionId);
  if (!currentSubmission) return;
  
  const detailsDiv = document.getElementById('submissionDetails');
  detailsDiv.innerHTML = generateSubmissionDetailsHTML(currentSubmission);
  
  // Set current values in status form
  document.getElementById('statusSelect').value = currentSubmission.status || 'pending';
  document.getElementById('handlerInput').value = currentSubmission.handler || '';
  document.getElementById('notesTextarea').value = currentSubmission.notes || '';
  
  // Show modal
  const modal = new bootstrap.Modal(document.getElementById('submissionModal'));
  modal.show();
}

// Generate submission details HTML
function generateSubmissionDetailsHTML(submission) {
  return `
    <div class="submission-details">
      <h6>Basic Information</h6>
      <table class="table table-sm">
        <tr>
          <th>Submission ID</th>
          <td>${submission.id}</td>
        </tr>
        <tr>
          <th>Date Submitted</th>
          <td>${new Date(submission.date).toLocaleString()}</td>
        </tr>
        <tr>
          <th>Department</th>
          <td>${submission.department}</td>
        </tr>
        <tr>
          <th>Type</th>
          <td>${submission.type}</td>
        </tr>
      </table>
      
      <h6 class="mt-4">Adjustment Details</h6>
      <!-- Render specific fields based on submission type -->
      ${generateTypeSpecificFields(submission)}
    </div>
  `;
}

// Generate type-specific fields HTML
function generateTypeSpecificFields(submission) {
  // Implement based on your submission types and fields
  return '';
}

// Update submission status
async function updateStatus() {
  if (!currentSubmission) return;
  
  const updates = {
    status: document.getElementById('statusSelect').value,
    handler: document.getElementById('handlerInput').value,
    notes: document.getElementById('notesTextarea').value
  };
  
  try {
    await google.script.run
      .withSuccessHandler(() => {
        loadSubmissions();
        bootstrap.Modal.getInstance(document.getElementById('submissionModal')).hide();
      })
      .withFailureHandler(error => {
        console.error('Error updating status:', error);
        alert('Error updating status');
      })
      .updateSubmissionStatus(currentSubmission.id, updates);
  } catch (error) {
    console.error('Error updating status:', error);
    alert('Error updating status');
  }
}

// Show new submission form
function showNewSubmissionForm() {
  // Re-use the existing form logic here
  const modal = new bootstrap.Modal(document.getElementById('newSubmissionModal'));
  modal.show();
}

// Initialize the dashboard when the page loads
window.onload = initializeDashboard;
</script>

// Stylesheet.html
<style>
.submission-details .table th {
  width: 150px;
}

.badge {
  padding: 0.5em 0.75em;
}

.table th {
  white-space: nowrap;
}

@media (max-width: 768px) {
  .container-fluid {
    padding: 10px;
  }
  
  .submission-details .table th {
    width: auto;
  }
}
</style>
